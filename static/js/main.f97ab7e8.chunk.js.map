{"version":3,"sources":["components/Button/Button.module.css","components/Counter/Counter.module.css","components/Counter/Display/Display.module.css","components/Counter/Display/Display.tsx","components/Button/Button.tsx","components/Counter/Console/Console.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Counter/Console/Console.module.css"],"names":["module","exports","Display","props","className","s","display","mode","IncrementModeDisplay","counter","min","max","SetModeDisplay","changeMax","changeMin","changeMode","style","display_content","error","type","value","onChange","e","newMin","target","onClick","newMax","currentTarget","Button","button","callback","disabled","disabledHandler","name","Console","console","IncConsole","setValues","changeCounter","SetConsole","inc","reset","set","Counter","resetCounter","App","minimum","maximum","minimal","localStorage","getItem","maximal","parseInt","useState","setMode","setCounter","setMin","setMax","incCounter","setItem","newValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f97ab7e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__2d6O8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2CvPx\",\"error\":\"Display_error__31ITC\",\"display_content\":\"Display_display_content__3CR6K\"};","import React, {ChangeEvent} from \"react\";\nimport s from './Display.module.css'\nimport {ModeType} from \"../../../App\";\n\ntype DisplayType = {\n    mode: ModeType\n    counter: number\n    changeMin: (newMin: string) => void\n    changeMax: (newMax: string) => void\n    changeMode: () => void\n    min: number\n    max: number\n}\n\nexport function Display(props: DisplayType) {\n    return (\n        <div className={s.display}>\n            {props.mode === \"incMode\" ?\n                <IncrementModeDisplay counter={props.counter} min={props.min} max={props.max} mode={props.mode}/> :\n                <SetModeDisplay max={props.max} min={props.min} changeMax={props.changeMax}\n                                changeMin={props.changeMin} changeMode={props.changeMode}/>}\n        </div>\n    )\n}\n\ntype IncrementModeDisplayType = {\n    counter: number\n    min: number\n    max: number\n    mode: ModeType\n}\n\nfunction IncrementModeDisplay(props: IncrementModeDisplayType) {\n    let style = props.min < props.max ? s.display_content : `${s.display_content} ${s.error}`\n    if ( props.mode === \"setMode\") {\n        style = props.min < props.max ? s.display_content : `${s.display_content} ${s.error}`\n    }\n    if ( props.mode === \"incMode\") {\n        style = props.counter < props.max ? s.display_content : `${s.display_content} ${s.error}`\n    }\n\n    const errorValue = \"Please enter the correct value \"\n    return (\n        <div className={style}>\n            {props.min < props.max ? props.counter : errorValue}\n        </div>\n    )\n}\n\ntype SetModeDisplayType = {\n    min: number\n    max: number\n    changeMin: (newMin: string) => void\n    changeMax: (newMax: string) => void\n    changeMode: () => void\n}\n\n\nfunction SetModeDisplay(props: SetModeDisplayType) {\n    let style = props.min < props.max ? s.display_content : `${s.display_content} ${s.error}`\n    const onChangeMinHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        const newMin = e.target.value\n        debugger\n\n        props.changeMin(newMin)\n\n    }\n    const onChangeMaxHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        const newMax = e.currentTarget.value\n        debugger\n        props.changeMax(newMax)\n    }\n\n    return (\n        <div className={style}>\n            <div>min value: <input type={\"number\"} value={props.min} onChange={onChangeMinHandler}\n                                   onClick={props.changeMode}/></div>\n            <div>max value: <input type={\"number\"} value={props.max} onChange={onChangeMaxHandler}\n                                   onClick={props.changeMode}/></div>\n        </div>\n    )\n}","import React from \"react\";\nimport s from './Button.module.css'\n\ntype ButtonType = {\n    name: string\n    callback: () => void\n    disabledHandler: (type: string) => boolean\n\n}\n\nexport function Button(props: ButtonType) {\n\n    return <div>\n        <button className={s.button} onClick={props.callback} disabled={props.disabledHandler(props.name)}>{props.name}</button>\n    </div>\n}","import React from \"react\";\nimport s from './Console.module.css'\nimport {ModeType} from \"../../../App\";\nimport {Button} from \"../../Button/Button\";\n\ntype ConsoleType = {\n    mode: ModeType\n    changeCounter: () => void\n    setValues: () => void\n    disabledHandler: (name: string) => boolean\n    resetCounter: () => void\n}\n\nexport function Console(props: ConsoleType) {\n    return (\n        <div className={s.console}>\n            {props.mode === \"incMode\" ?\n                <IncConsole disabledHandler={props.disabledHandler} setValues={props.setValues}\n                            changeCounter={props.changeCounter}/> :\n                <SetConsole setValues={props.setValues} disabledHandler={props.disabledHandler}/>}\n        </div>\n    )\n}\n\ntype IncConsoleType = {\n    setValues: () => void\n    disabledHandler: (name: string) => boolean\n    changeCounter: () => void\n}\n\nfunction IncConsole(props: IncConsoleType) {\n    return <div>\n        <div className={s.inc}><Button name={\"inc\"} callback={props.changeCounter}\n                                       disabledHandler={props.disabledHandler}/></div>\n        <div className={s.reset}><Button name={\"reset\"} callback={props.setValues}\n                                         disabledHandler={props.disabledHandler}/></div>\n    </div>\n}\n\ntype SetConsoleType = {\n    setValues: () => void\n    disabledHandler: (name: string) => boolean\n}\n\nfunction SetConsole(props: SetConsoleType) {\n    return <div className={s.set}>\n        <Button name={\"set\"} callback={props.setValues} disabledHandler={props.disabledHandler}/>\n    </div>\n}","import React from \"react\";\nimport {Display} from \"./Display/Display\";\nimport {Console} from \"./Console/Console\";\nimport s from './Counter.module.css'\nimport {ModeType} from \"../../App\";\n\ntype CounterType = {\n    mode: ModeType\n    counter: number\n    changeCounter: () => void\n    changeMin: (newMin: string) => void\n    changeMax: (newMax: string) => void\n    min: number\n    max: number\n    setValues: () => void\n    disabledHandler: (name: string) => boolean\n    resetCounter: () => void\n    changeMode: () => void\n}\n\nexport function Counter(props: CounterType) {\n    return (\n        <div className={s.counter}>\n            <Display mode={props.mode} counter={props.counter} changeMin={props.changeMin} max={props.max}\n                     min={props.min} changeMax={props.changeMax} changeMode={props.changeMode} />\n            <Console mode={props.mode} changeCounter={props.changeCounter} setValues={props.setValues} disabledHandler={props.disabledHandler} resetCounter={props.resetCounter} />\n        </div>\n    )\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter/Counter\";\n\nexport type ModeType = \"incMode\" | \"setMode\";\n\nfunction App() {\n    let minimum;\n    let maximum;\n    let minimal = localStorage.getItem(\"min\")\n    let maximal = localStorage.getItem(\"max\")\n    minimal !== null ? minimum = parseInt(minimal) : minimum = 0\n    maximal !== null ? maximum = parseInt(maximal) : maximum = 10\n\n    let [mode, setMode] = useState<ModeType>(\"incMode\")\n    let [counter, setCounter] = useState(minimum)\n    let [min, setMin] = useState(minimum)\n    let [max, setMax] = useState(maximum)\n\n    const changeMode = () => {\n        setMode(\"setMode\")\n    }\n    const incCounter = () => {\n        setCounter(counter + 1)\n    }\n    const changeMin = (newMin: string) => {\n        localStorage.setItem(\"min\", newMin)\n        const newValue = parseInt(newMin)\n        setMin(newValue);\n    }\n    const changeMax = (newMax: string) => {\n        localStorage.setItem(\"max\", newMax)\n        const newValue = parseInt(newMax)\n        setMax(newValue);\n    }\n    const resetCounter = () => {\n        setCounter(min);\n    }\n    const setValues = () => {\n        setMode(\"incMode\")\n        setCounter(min);\n        debugger\n    }\n    const disabledHandler = (name: string): boolean => {\n        switch (name) {\n            case \"set\":\n                if (max > min && max >= 0 && mode === \"setMode\") {\n                    return false\n                }\n                return true\n            case \"inc\":\n                if (counter === max || mode === \"setMode\") {\n                    return true\n                }\n                return false\n            case \"reset\":\n                if (mode === \"setMode\") {\n                    return true\n                }\n                return false\n            default\n            :\n                return false\n        }\n\n    }\n    return (\n        <div className=\"App\">\n            <Counter mode={\"setMode\"} counter={counter} changeCounter={incCounter} changeMin={changeMin} min={min}\n                     max={max} changeMax={changeMax} setValues={setValues} disabledHandler={disabledHandler}\n                     resetCounter={resetCounter} changeMode={changeMode} />\n            <Counter mode={\"incMode\"} counter={counter} changeCounter={incCounter} changeMin={changeMin} min={min}\n                     max={max} changeMax={changeMax} setValues={setValues} disabledHandler={disabledHandler}\n                     resetCounter={resetCounter} changeMode={changeMode} />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"console\":\"Console_console__2czC_\",\"reset\":\"Console_reset__1tqWr\",\"inc\":\"Console_inc__rnsg9\",\"set\":\"Console_set__1Yosl\"};"],"sourceRoot":""}